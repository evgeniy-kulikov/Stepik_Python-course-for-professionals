# 8.4 –†–µ–∫—É—Ä—Å–∏—è
""""""

# –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –∫–æ–ª–ª–µ–∫—Ü–∏–π

"""
–ó–∞–¥–∞—á–∞ 1. 
–î–∞–Ω —Å–ø–∏—Å–æ–∫, —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —Å–ø–∏—Å–∫–∏, 
—Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏. 
–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏ –∏–∑ –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö, 
—Ä–∞–∑–¥–µ–ª–∏–≤ –ø—Ä–æ–±–µ–ª–æ–º.
"""
def get_all_str(data):
    if type(data) == str:
        print(data, end=' ')            # –±–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π
    if type(data) == list:
        for i in data:
            get_all_str(i)              # —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å–ª—É—á–∞–π

numbers = ['1', ['2', '3', ['4'], ['5', ['6', '7']]]]
get_all_str(numbers)
# 1 2 3 4 5 6 7


"""
–ó–∞–¥–∞—á–∞ 2. 
–î–∞–Ω —Å–ª–æ–≤–∞—Ä—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏, —Ç–æ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ –º–æ–≥—É—Ç –±—ã—Ç—å –¥—Ä—É–≥–∏–µ —Å–ª–æ–≤–∞—Ä–∏. 
–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–º—É –∫–ª—é—á—É, –∏ –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ. 
–ü—Ä–∏ —ç—Ç–æ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ —Ç–∞–∫–æ–π –∫–ª—é—á –∏–º–µ–µ—Ç—Å—è –≤ —Å–ª–æ–≤–∞—Ä–µ, –ø—Ä–∏—á–µ–º –æ–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π. 
"""


def find_key(data, key):
    if key in data:
        return data[key]  # –±–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π

    for v in data.values():
        if type(v) == dict:
            value = find_key(v, key)  # —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å–ª—É—á–∞–π
            if value is not None:
                return value

info = {'name': 'Alyson',
        'surname': 'Hannigan',
        'birthday': {'day': 24, 'month': 'March', 'year': 1974},
        'family': {'parents': {'mother': 'Emilie Posner', 'father': 'Alan Hannigan'}}}

print(find_key(info, 'year'))       # 1974
print(find_key(info, 'father'))     # Alan Hannigan


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª—É–±–∏–Ω—ã —Ä–µ–∫—É—Ä—Å–∏–∏ –≤ Python

# –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≥–ª—É–±–∏–Ω—ã —Ä–µ–∫—É—Ä—Å–∏–∏ –º–æ–∂–Ω–æ
# —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ getrecursionlimit() –∏–∑ –º–æ–¥—É–ª—è sys
from sys import getrecursionlimit

limit = getrecursionlimit()
print(limit)  # 1000


# –ú–æ–∂–Ω–æ —è–≤–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≥–ª—É–±–∏–Ω—ã —Ä–µ–∫—É—Ä—Å–∏–∏.
# –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è setrecursionlimit() –∏–∑ –º–æ–¥—É–ª—è sys
import sys

limit = sys.getrecursionlimit()
print(limit)        # 1000

sys.setrecursionlimit(6000)
new_limit = sys.getrecursionlimit()
print(new_limit)        # 6000


"""   *   *   *   Task   *   *   *   """


#  8.4-1
"""
–§—É–Ω–∫—Ü–∏—è recursive_sum()
–†–µ–∞–ª–∏–∑—É–π—Ç–µ recursive_sum() —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∫—É—Ä—Å–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:
nested_lists ‚Äî —Å–ø–∏—Å–æ–∫, —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —è–≤–ª—è—é—Ç—Å—è —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –∏–ª–∏ —Å–ø–∏—Å–∫–∏, 
—ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä—ã—Ö, –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å, —Ç–∞–∫–∂–µ —è–≤–ª—è—é—Ç—Å—è –ª–∏–±–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞, –ª–∏–±–æ —Å–ø–∏—Å–∫–∏; 
–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π

–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã—á–∏—Å–ª—è—Ç—å —Å—É–º–º—É –≤—Å–µ—Ö —á–∏—Å–µ–ª –≤–æ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–∞—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. 
–ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ nested_lists –ø—É—Å—Ç, —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —á–∏—Å–ª–æ  0

Input:  my_list = [1, [4, 4], 2, [1, [2, 10]]]
        print(recursive_sum(my_list))
Output: 24
"""
def recursive_sum(data):
    cnt = 0
    if type(data) == int:
        cnt += data
    if type(data) == list:
        for el in data:
            cnt += recursive_sum(el)
    return cnt

my_list = [1, [4, 4], 2, [1, [2, 10]]]
# my_list = [[], [[]]]
print(recursive_sum(my_list))


#  8.4-2
"""
–§—É–Ω–∫—Ü–∏—è linear()
–õ–∏–Ω–µ–∞—Ä–∏–∑–∞—Ü–∏—è ‚Äî —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞, 
–∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤, 
–≤ —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ —Ç–µ –∂–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑ –∫–∞–∫–æ–π-–ª–∏–±–æ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏:
[1, [2, 3], [4, [5, 6, [7, 8, 9]]]]
[1, 2, 3, 4, 5, 6, 7, 8, 9]

–†–µ–∞–ª–∏–∑—É–π—Ç–µ linear() —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∫—É—Ä—Å–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:
nested_lists ‚Äî —Å–ø–∏—Å–æ–∫, —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —è–≤–ª—è—é—Ç—Å—è —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –∏–ª–∏ —Å–ø–∏—Å–∫–∏, 
—ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä—ã—Ö, –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å, —Ç–∞–∫–∂–µ —è–≤–ª—è—é—Ç—Å—è –ª–∏–±–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞, –ª–∏–±–æ —Å–ø–∏—Å–∫–∏; 
–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π
–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫, 
–ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Å–æ–±–æ–π –ª–∏–Ω–µ–∞—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ nested_lists
Input:  my_list = [3, [4], [5, [6, [7, 8]]]]
        print(linear(my_list))
Output: [3, 4, 5, 6, 7, 8]
"""
def linear(ls: list):
    res = []
    if type(ls) == int:
        res += [ls]
    elif type(ls) == list:
        for el in ls:
            res += linear(el)
    return res

my_list = [3, [4], [5, [6, [7, 8]]]]
print(linear(my_list))


#  8.4-3
"""
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_value(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:

- nested_dicts ‚Äî —Å–ª–æ–≤–∞—Ä—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–∏, 
  –∫–æ—Ç–æ—Ä—ã–µ, –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å, —Ç–∞–∫ –∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–∏; 
  –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π
- key ‚Äî —Ö–µ—à–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç

–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ, 
–∫–æ—Ç–æ—Ä–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á—É key –≤ —Å–ª–æ–≤–∞—Ä–µ nested_dicts –∏–ª–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –µ–≥–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞—Ä–µ–π, 
–∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
Input:  data = {'first_name': 'Tom', 'last_name': 'Cruise', 'birthday': {'day': 24, 'month': 'May', 'year': 1974}}
        print(get_value(data, 'birthday'))
Output: {'day': 24, 'month': 'May', 'year': 1974}
"""
def get_value(dt: dict, key):
    if key in dt:
        return dt[key]  # –±–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π

    for el in dt.values():
        if type(el) == dict:
            val = get_value(el, key)  # —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å–ª—É—á–∞–π
            if val is not None:
                return val


data = {'first_name': 'Tom', 'last_name': 'Cruise', 'birthday': {'day': 24, 'month': 'May', 'year': 1974}}
print(get_value(data, 'birthday'))


#  8.4-4
"""
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_all_values(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:

- nested_dicts ‚Äî —Å–ª–æ–≤–∞—Ä—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–∏, 
  –∫–æ—Ç–æ—Ä—ã–µ, –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å, —Ç–∞–∫ –∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–∏; 
  –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π
- key ‚Äî —Ö–µ—à–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç

–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è, 
–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á—É key –≤ —Å–ª–æ–≤–∞—Ä–µ nested_dicts –∏ –≤—Å–µ—Ö –µ–≥–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞—Ä—è—Ö, 
–∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Ö –≤ –≤–∏–¥–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞. 
–ï—Å–ª–∏ –∫–ª—é—á–∞ key –Ω–µ—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ, —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ.
–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –≤—Å–µ –∏—Å–∫–æ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è —Ö–µ—à–∏—Ä—É–µ–º—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏, —Ç.–µ. –º–æ–≥—É—Ç –±—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞.

Input:  my_dict = {'Arthur': {'hobby': 'videogames', 'drink': 'cacao'}, 'Timur': {'hobby': 'math'}}
        result = get_all_values(my_dict, 'hobby')
        print(*sorted(result))
Output: math videogames
"""
def get_all_values(dt: dict, key: str) -> set:
    res = set()
    if key in dt:
        res.add(dt[key])

    for val in dt.values():
        if isinstance(val, dict):
            res.update(get_all_values(val, key))
    return res


my_dict = {'Arthur': {'hobby': 'videogames', 'drink': 'cacao'}, 'Timur': {'hobby': 'math'}}
result = get_all_values(my_dict, 'hobby')
print(*sorted(result))


#  8.4-5
"""
dict_travel() üå∂Ô∏èüå∂Ô∏è
https://stepik.org/lesson/594680/step/8?unit=589701
–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:
nested_dicts ‚Äî —Å–ª–æ–≤–∞—Ä—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π —á–∏—Å–ª–∞, —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–∏, 
–∫–æ—Ç–æ—Ä—ã–µ, –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å, —Ç–∞–∫ –∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π —á–∏—Å–ª–∞, —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–∏; 
–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π
–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–æ–¥–∏—Ç—å –≤—Å–µ –ø–∞—Ä—ã –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è nested_dicts, 
–∞ —Ç–∞–∫–∂–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ—Ö –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏—Ö —Å–ª–æ–≤–∞—Ä–µ–π. 
–ü—Ä–∏ –≤—ã–≤–æ–¥–µ –∑–Ω–∞—á–µ–Ω–∏–π –¥–æ—á–µ—Ä–Ω–∏—Ö —Å–ª–æ–≤–∞—Ä–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—á–∏—Å–ª—è—Ç—å –∏–º–µ–Ω–∞ –≤—Å–µ—Ö –∫–ª—é—á–µ–π, 
–Ω–∞—á–∏–Ω–∞—è —Å –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö —Ç–æ—á–∫–∞–º–∏.

Input:  data = {'a': 1, 'b': {'c': 30, 'a': 10, 'b': 20}}
        dict_travel(data)
Output: a: 1
        b.a: 10
        b.b: 20
        b.c: 30
"""
def dict_travel(dt: dict, path=''):
    for key, val in sorted(dt.items()):
        if isinstance(val, dict):
            dict_travel(val, path + f"{key}.")
        else:
            print(f"{path}{key}: {val}")

data = {'a': 1, 'b': {'c': 30, 'a': 10, 'b': 20}}
dict_travel(data)
