#  10.8 –ú–æ–¥—É–ª—å itertools
""""""


"""   *   *   *   Task   *   *   *   """


#  10.8-1
"""
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é tabulate(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:
func ‚Äî –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
–§—É–Ω–∫—Ü–∏—è tabulate() –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä, 
–≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–∏ func 
—Å–Ω–∞—á–∞–ª–∞ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º 1, –∑–∞—Ç–µ–º 2, –∑–∞—Ç–µ–º 3, –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.
"""
from itertools import count

# –í–∞—Ä–∏–∞–Ω—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
def tabulate(func):
    return map(func, count(1))

# –•–æ—Ä–æ—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ
def tabulate(func):
    for el in count(1):
        yield func(el)

func = lambda x: x
values = tabulate(func)
print(next(values))  # 1
print(next(values))  # 2

func = lambda x: x ** 2
values = tabulate(func)
for _ in range(100):
    print(next(values))
# 1
# 2
# ...
# 1000


def func(n):
    return 'beegeek' * n

values = tabulate(func)
for _ in range(10):
    print(next(values))
# beegeek
# beegeekbeegeek
# beegeekbeegeekbeegeek
# beegeekbeegeekbeegeekbeegeek


#  10.8-2
"""
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é factorials() —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ accumulate(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:
n ‚Äî –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ n —á–∏—Å–µ–ª, 
–∫–∞–∂–¥–æ–µ –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–º –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞.
"""
from itertools import accumulate
import operator
def factorials(n):
    yield from accumulate(range(1, n + 1), operator.mul)
    # yield from accumulate(range(1, n + 1), lambda x, y: x * y)


numbers = factorials(6)
print(*numbers)
# 1 2 6 24 120 720


#  10.8-3
"""
–§—É–Ω–∫—Ü–∏—è alnum_sequence()
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é alnum_sequence(), –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä, 
—Ü–∏–∫–ª–∏—á–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –∏ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤:
1,A,2,B,3,C,..,X,25,Y,26,Z
"""
from itertools import cycle
from string import ascii_uppercase as letter

def alnum_sequence():
    n = cycle(range(1, 27))
    s = cycle(letter)
    res = (el for item in zip(n, s) for el in item)
    yield from cycle(res)

# –í–∞—Ä–∏–∞–Ω—Ç
def alnum_sequence():
    for el in zip(cycle(range(1, 27)), cycle(letter)):
        yield from el

def alnum_sequence():
    n = cycle(range(1, 27))
    s = cycle(letter)
    while True:
        yield next(n)
        yield next(s)

# –ß—Ç–æ –±—ã —Ç–∞–∫–æ–≥–æ –µ—â–µ –≤—ã–¥—É–º–∞—Ç—å? üôÉ
def alnum_sequence():
    n = cycle(range(1, 27))
    s = cycle(letter)
    for _ in cycle(letter):
        yield from (next(n), next(s))

alnum = alnum_sequence()
print(*(next(alnum) for _ in range(55)))
# 1 A 2 B 3 C 4 D 5 E 6 F 7 G 8 H 9 I 10 J 11 K 12 L 13 M 14 N 15 O
# 16 P 17 Q 18 R 19 S 20 T 21 U 22 V 23 W 24 X 25 Y 26 Z 1 A 2


#  10.8-4
"""
–§—É–Ω–∫—Ü–∏—è roundrobin() üå∂Ô∏è
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é roundrobin(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, 
–∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —è–≤–ª—è–µ—Ç—Å—è –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º –æ–±—ä–µ–∫—Ç–æ–º.
–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä, 
–≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—Å–µ—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: 
—Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–≤–æ–≥–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –∑–∞—Ç–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤—Ç–æ—Ä–æ–≥–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ; 
–ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–≤–æ–≥–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –∑–∞—Ç–µ–º –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –≤—Ç–æ—Ä–æ–≥–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.
"""
from itertools import zip_longest

# –°–ª–∞–±–æ–µ –º–µ—Å—Ç–æ - –∞—Ä–≥—É–º–µ–Ω—Ç fillvalue. –ï–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–≤–Ω—ã–º –∫–∞–∫–æ–º—É-–ª–∏–±–æ –∑–Ω–∞—á–µ–Ω–∏—é –∏–∑ *args
def roundrobin(*args):
    yield from (el for data in zip_longest(*args, fillvalue='') for el in data if el != '')

    # for data in zip_longest(*args, fillvalue=''):
    #     for el in data:
    #         if el != '':
    #             yield el


# –ü–æ –æ—á–µ—Ä–µ–¥–∏ –æ–ø—É—Å—Ç–æ—à–∞–µ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä—ã, –∞ –µ—Å–ª–∏ –≤—Å–µ –ø—É—Å—Ç—ã–µ, —Ç–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–∏–∫–ª while
def roundrobin(*args):
    iters = tuple(iter(el) for el in args)
    while True:
        err_counter = 0
        for el in iters:
            try:
                res = next(el)
            except StopIteration:
                err_counter += 1
            else:
                yield res
        if err_counter == len(iters):
            break


print(*roundrobin('abc', 'd', 'ef'))
# a d e b f c

numbers = [1, 2, 3]
letters = iter('beegeek')
print(*roundrobin(numbers, letters))
# 1 b 2 e 3 e g e e k

print(list(roundrobin()))
# []

