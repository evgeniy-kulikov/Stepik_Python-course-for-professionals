# 9.4 –§—É–Ω–∫—Ü–∏–∏ –∫–∞–∫ –æ–±—ä–µ–∫—Ç—ã
""""""
# https://stepik.org/lesson/647292/step/1?unit=643926
# https://stepik.org/lesson/647292/step/13?unit=643926


"""   *   *   *   Task   *   *   *   """

#  9.4-1
"""
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é numbers_sum(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:
elems ‚Äî —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—É–º–º—É —á–∏—Å–µ–ª (—Ç–∏–ø—ã int –∏ float), 
–Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ —Å–ø–∏—Å–∫–µ elems, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –≤—Å–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã. 
–ï—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ elems –Ω–µ—Ç —á–∏—Å–µ–ª, —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —á–∏—Å–ª–æ 0.
–¢–∞–∫–∂–µ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Å—Ç—Ä–æ–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.
"""
def numbers_sum(elems):
    '''
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –µ–≥–æ —á–∏—Å–µ–ª (int, float),
    –∏–≥–Ω–æ—Ä–∏—Ä—É—è –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã. 0 - –µ—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ —á–∏—Å–µ–ª –Ω–µ—Ç.
    '''
    res = 0
    if isinstance(elems, list):
        for el in elems:
            if type(el) in (int, float):
                res += el
    return res


#  9.4-2
"""
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é print() —Ç–∞–∫, 
—á—Ç–æ–±—ã –æ–Ω–∞ –ø–µ—á–∞—Ç–∞–ª–∞ –≤—Å–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.
–ó–Ω–∞—á–µ–Ω–∏—è sep –∏ end —Ç–∞–∫–∂–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å—Å—è –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä.
"""
# –ß–µ—Ä–µ–∑ –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–º–µ–Ω—É –∏–º–µ–Ω–∏ print()
origin_print = print

def print(*args, sep=' ', end='\n'):
    # args = (str(el).upper() for el in args)
    args = (el.upper() if isinstance(el, str) else el for el in args)
    origin_print(*args, sep=sep.upper(), end=end.upper())


# –°—Ä–∞–∑—É –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é print()
import sys

def print(*args, sep=' ', end='\n'):
    words = map(lambda x: x.upper() if type(x) == str else x, args)
    new_str = list(map(str, words))
    sys.stdout.write(f'{sep.upper().join(new_str)}{end.upper()}')


print('bee', 'geek', 'any', sep=' & ')  # BEE & GEEK & ANY
print('bee', 'geek', 'any', end=' –æ–∫–æ–Ω—á–∞–Ω–∏–µ\n')  # BEE GEEK ANY –û–ö–û–ù–ß–ê–ù–ò–ï



#  9.4-3
"""
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é polynom(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:
x ‚Äî –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è ùë•^2 + 1
–¢–∞–∫–∂–µ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –∞—Ç—Ä–∏–±—É—Ç values, 
–ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Å–æ–±–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–æ (—Ç–∏–ø set) –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –≤—ã—á–∏—Å–ª–µ–Ω—ã.
"""
def polynom(x):
    res = int(x)**2 + 1
    polynom.__dict__.setdefault('values', set())
    polynom.values.add(res)
    return res


# –í–∞—Ä–∏–∞–Ω—Ç
def polynom(x):
    res = int(x)**2 + 1
    if 'values' not in polynom.__dict__:
        polynom.__dict__['values'] = set()
    polynom.__dict__['values'].update({res})
    return res

polynom(1)
polynom(2)
polynom(3)

print(*sorted(polynom.values))  # 2 5 10


#  9.4-4
"""
–§—É–Ω–∫—Ü–∏—è remove_marks()
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é remove_marks(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:
text ‚Äî –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
marks ‚Äî –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤
–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç—Ä–æ–∫—É text, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏–≤ –∏–∑ –Ω–µ–µ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–µ marks.
–¢–∞–∫–∂–µ —Ñ—É–Ω–∫—Ü–∏—è remove_marks() –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –∞—Ç—Ä–∏–±—É—Ç count, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Å–æ–±–æ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤ –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
"""
def remove_marks(text, marks):
    remove_marks.__dict__.setdefault('count', 0)
    remove_marks.count += 1
    # remove_marks.__dict__['count'] += 1

    for el in marks:
        text = text.replace(el, '')
    return text


# –ö–æ—Ä–æ—á–µ
def remove_marks(text, marks):
    remove_marks.__dict__['count'] = remove_marks.__dict__.get('count', 0) + 1

    for el in marks:
        text = text.replace(el, '')
    return text


text = 'Hi! By?'
print(remove_marks(text, '!?'))  # Hi By
print(remove_marks.count)  # 1

