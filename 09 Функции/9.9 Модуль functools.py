#  9.9 –ú–æ–¥—É–ª—å functools
""""""


"""   *   *   *   Task   *   *   *   """


#  9.9-1
"""
–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è send_email(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç—Ä–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:

name ‚Äî –∏–º—è email_address ‚Äî –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã 
text ‚Äî —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∏—Å—å–º–∞. 
–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏—Å—å–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏–º–µ–Ω–µ–º name –Ω–∞ –∞–¥—Ä–µ—Å email_address —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º text.

–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é to_Timur() —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ partial(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:
text ‚Äî —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∏—Å—å–º–∞. 
–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–∏—Å—å–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏–º–µ–Ω–µ–º –¢–∏–º—É—Ä –Ω–∞ –∞–¥—Ä–µ—Å timyrik20@beegeek.ru —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º text.

–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é send_an_invitation() —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ partial(), 
–∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:
name ‚Äî –∏–º—è 
email_address ‚Äî –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã 
–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–∏—Å—å–º–æ –Ω–∞ –∏–º—è name –∏ –Ω–∞ –∞–¥—Ä–µ—Å email_address —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º:

–®–∫–æ–ª–∞ BEEGEEK –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –í–∞—Å –Ω–∞ –Ω–æ–≤—ã–π –∫—É—Ä—Å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ —è–∑—ã–∫–µ Python. —Ç—É—Ç—É—Ç....
"""

from functools import partial

def send_email(name, email_address, text):
    return f'–í –ø–∏—Å—å–º–µ –¥–ª—è {name} –Ω–∞ –∞–¥—Ä–µ—Å {email_address} —Å–∫–∞–∑–∞–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ: {text}'

to_Timur = partial(send_email, '–¢–∏–º—É—Ä', 'timyrik20@beegeek.ru')

text = "–®–∫–æ–ª–∞ BEEGEEK –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –í–∞—Å –Ω–∞ –Ω–æ–≤—ã–π –∫—É—Ä—Å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ —è–∑—ã–∫–µ Python. —Ç—É—Ç—É—Ç...."
send_an_invitation = partial(send_email, text=text)


#  9.9-2
"""
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ 
–∏ –≤ –∫–∞–∂–¥–æ–º —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ—Ç –±—É–∫–≤—ã –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ.
–°–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
Input:  tutorial
        pattern
        add
Output: ailorttu
        aenprtt
        add
"""
from functools import lru_cache
import sys

@lru_cache()
def teach_dima(word):
    return ''.join(sorted(word)).strip()

[print(teach_dima(el)) for el in sys.stdin.readlines()]


#  9.9-3
"""
–ü—Ä–æ—Å—Ç–æ –î–∏–º–∞ üôÉ
https://stepik.org/lesson/751476/step/25?unit=753330
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é ways(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:
–Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n ‚â§ 100.
–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–æ—Å–æ–±–æ–≤, –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å—Å—è –Ω–∞ n-—É—é —Å—Ç—É–ø–µ–Ω—å. 
–ü—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–µ—Ä–≤–æ–π —Å—Ç—É–ø–µ–Ω–∏, –ø–æ–¥–Ω–∏–º–∞—Ç—å—Å—è –º–æ–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –æ–¥–Ω—É, —Ç—Ä–∏ –∏–ª–∏ —á–µ—Ç—ã—Ä–µ —Å—Ç—É–ø–µ–Ω–∏.
"""
from functools import lru_cache

@lru_cache()
def ways(n):
    if n == 1:
        return 1
    elif n < 1:
        return 0
    else:
        return ways(n - 1) + ways(n - 3) + ways(n - 4)


print(ways(5))  # 4
print(ways(2))  # 1
print(ways(100))  # 256319508074468182850
