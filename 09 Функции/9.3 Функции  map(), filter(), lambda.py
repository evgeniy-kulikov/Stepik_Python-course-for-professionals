#  9.3 –§—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞ map(), filter(). –ê–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ lambda
""""""

"""
–ê–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏  lambda
–û–±—â–∏–π —Ñ–æ—Ä–º–∞—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: lambda —Å–ø–∏—Å–æ–∫_–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
—Å–ø–∏—Å–æ–∫_–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ‚Äì —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, 
–≤—ã—Ä–∞–∂–µ–Ω–∏–µ ‚Äì –∑–Ω–∞—á–µ–Ω–∏–µ, –ª–∏–±–æ –∫–æ–¥, –¥–∞—é—â–∏–π –∑–Ω–∞—á–µ–Ω–∏–µ.
"""
f1 = lambda: 17                          # —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
f2 = lambda —Ö, —É: —Ö ** 2 + —É ** 2        # —Ñ—É–Ω–∫—Ü–∏—è —Å –¥–≤—É–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
f3 = lambda —Ö, —É, z: —Ö * —É * z           # —Ñ—É–Ω–∫—Ü–∏—è —Å —Ç—Ä–µ–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏

print(f1())             # 17
print(f2(6, 8))         # 100
print(f3(5, 10, 30))    # 1500

# –ê–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —è–≤–ª—è—é—Ç—Å—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏, —Ç–æ –µ—Å—Ç—å –∏—Ö –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞—Ç—å –≤ –º–æ–º–µ–Ω—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.
print((lambda x, y: x + y)(10, 7))          # 17
print(eval('(lambda num: num ** 2)(7)'))    # 49


"""
–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è map() 
–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–µ–∫–æ—Ç–æ—Ä–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π 
–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞.
–ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏:
func ‚Äî —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
iterable ‚Äî –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç
–§—É–Ω–∫—Ü–∏—è map() –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é func –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ iterable. 
–ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç iterable –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏—é func –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞.
"""
squares = map(lambda x: x ** 2, range(1, 10))
print(*squares)  # 1 4 9 16 25 36 49 64 81


"""
–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è filter() 
—Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–µ–∫–æ—Ç–æ—Ä–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π 
–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞.
–ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏:
func ‚Äî —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç bool –∑–Ω–∞—á–µ–Ω–∏–µ
iterable ‚Äî –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç
–§—É–Ω–∫—Ü–∏—è filter() —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ iterable –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ñ—É–Ω–∫—Ü–∏–∏ func. 
–ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è func –≤–µ—Ä–Ω—ë—Ç False, 
—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ iterable –Ω–µ –ø–æ–ø–∞–¥—ë—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä.
"""
nums = [9, 3, 45, 67, 12, 90, 87, 12, 45, 67]
filter1 = filter(lambda x: x % 2 == 0, nums)
print(*filter1)  # 12 90 12


#  –∏—Ç–µ—Ä–∞—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Ñ—É–Ω–∫—Ü–∏–∏ map() –∏ filter(), –º–æ–∂–Ω–æ –æ–±–æ–π—Ç–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

"""   *   *   *   Task   *   *   *   """

#  9.3-1
"""
–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —á–∏—Å–ª–∞ (—Ç–∏–ø int –∏ float), –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ data, –æ—Ç–±—Ä–∞—Å—ã–≤–∞—è –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å —É –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª. 
–ß–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ —Å–≤–æ–µ–º –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
"""
data = ['Timur', -16.648911695768902, 'six', -202, 883.0093275936454, -765, (3, 4), -105.10718000213546, 976,
        -308.96857946288094, 458, ['one', 'two'], 479.92207220345927, -87, -71, 'twelve', 112, -621, -715.0179551194733,
        'seven', 229, 729, -358, [1, 2, 3], -974, 882, -894.4709033242768, '', 323.7720806756133, 'beegeek', -224, 431,
        170.6353248658936, -343.0016746052049, 'number', 104.17133679352878, [], -353.5964777099863, 'zero', -113, 288,
        None, -708.3036176571618]


res = map(int, filter(lambda x: type(x) in (int, float), data))
[print(el) for el in res]

res = map(int, filter(lambda x: isinstance(x, (float, int)), data))
print(*res, sep='\n')

from math import trunc
res = map(trunc, filter(lambda x: type(x) in (int, float), data))
[print(el) for el in res]


#  9.3-2
"""
–í—ã–≤–µ—Å—Ç–∏ —Å—É–º–º—É –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –≤—Å–µ—Ö –¥–≤—É–∑–Ω–∞—á–Ω—ã—Ö —á–∏—Å–µ–ª –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª—è—Ç—Å—è –Ω–∞ 9 –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞.
"""
numbers = [4754, -4895, -364, -4764, 4683, 1639, -43, 228, -2701, -1503, 1223, 4340, -1296, 3939, -345, 623, -3275,
           1003, 4367, -1739, 550, -1217, -1334, 1526, -4359, -3028, -4663, 3356, 3887, 4297, -1982, 1013, 3299, 3556,
           -3324, 417, 3531, -3134, 1782, 4439, 1652, -985, 4327, 1517, 1225, -915, 2808, -3851, -1005, 3396, 2842,
           -3879, -3824, -3805, 1609, -4741, -3072, 3573, 4680, 588, -1430, 2378, -1095, -343, 4357, -2164, -3304, 4354,
           4926, -352, -1187, -3313, 2741, 4786, -2689, 741, 4558, 1442, 62, -1099, -2201, -16, -3115, 1862, 2384, 4072,
           -90, 204, 1158, -3134, -2512, 756, 4148, 4370, 1756, 3609, -1148, -3909, 4123, -2906, 69, 96, 1111]

res = sum(map(lambda x: x * x, filter(lambda x: 9 < abs(x) < 100 and x % 9 == 0, numbers)))
print(res)


#  9.3-3
"""
–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∏–º–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –Ω–∞ –±—É–∫–≤—ã –ê –∏ –ú (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞) –∏ –∏–º–µ—é—Ç –¥–ª–∏–Ω—É –±–æ–ª—å—à–µ 4. 
–ò–º–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∫–∞–∂–¥–æ–µ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã.
Input:  names
Output: –ê–¥–µ–ª–∏–Ω–∞ –ê–π–ª–∏–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä ...
"""
names = ['—É–ª—å—è–Ω–∞', '–∞—Ä–∏–Ω–∞', '–î–º–∏—Ç—Ä–∏–π', '–°–µ—Ä–≥–µ–π', '–Ø–Ω–∞', '–º–∏–ª–∞', '–û–ª—å–≥–∞', '—Å–æ—Ñ—å—è', '—Å–µ–º—ë–Ω', '–ù–∏–∫–∏—Ç–∞', '–º–∞—Ä–≥–∞—Ä–∏—Ç–∞',
         '–í–∞—Å–∏–ª–∏—Å–∞', '–ö–∏—Ä–∏–ª–ª', '–∞–ª–µ–∫—Å–∞–Ω–¥—Ä', '–∞–ª–µ–∫—Å–∞–Ω–¥—Ä–∞', '–ò–≤–∞–Ω', '–∞–Ω–¥—Ä–µ–π', '–†–æ–¥–∏–æ–Ω', '–º–∞–∫—Å–∏–º', '–∞–ª–∏—Å–∞', '–ê—Ä—Ç—ë–º',
         '—Å–æ—Ñ–∏—è', '–≤–ª–∞–¥–∏–º–∏—Ä', '–¥–∞–º–∏—Ä', '–í–∞–ª–µ—Ä–∏–π', '—Å—Ç–µ–ø–∞–Ω', '–ê–ª–µ–∫—Å–µ–π', '–ú–∞—Ä–∫', '–æ–ª–µ–≥', '–∏—Ä–∏–Ω–∞', '–ú–∏–ª–∞–Ω–∞', '–º–∏—è',
         '–¥–µ–Ω–∏—Å', '–§—ë–¥–æ—Ä', '–ï–ª–∏–∑–∞–≤–µ—Ç–∞', '–∞–π–ª–∏–Ω', '–í–∞—Ä–≤–∞—Ä–∞', '–≤–∞–ª–µ—Ä–∏—è', '–ê–ª—ë–Ω–∞', '–ù–∏–∫–æ–ª—å', '—é–ª–∏—è', '–ö—Å–µ–Ω–∏—è', '–ø—ë—Ç—Ä',
         '–≥–µ–æ—Ä–≥–∏–π', '–ú–∞—Ä–∏—è', '–≥–ª–µ–±', '–∏–ª—å—è', '–ó–∞—Ö–∞—Ä', '–î–∞—Ä—å—è', '–ï–≤–≥–µ–Ω–∏—è', '–º–∞—Ç–≤–µ–π', '–°–µ—Ä–∞—Ñ–∏–º', '–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞', '–¢–∏–º–æ—Ñ–µ–π',
         '–≤–∏–∫—Ç–æ—Ä', '–ï–≥–æ—Ä', '–ù–∏–∫–∞', '–∞–Ω–Ω–∞', '–¥–∞–Ω–∏–∏–ª', '—Ç–∏—Ö–æ–Ω', '–≤–µ—Ä–∞', '–∫–∏—Ä–∞', '–≠–º–∏–ª–∏—è', '–í–∏–∫—Ç–æ—Ä–∏—è', '–ò–≥–æ—Ä—å', '–ø–æ–ª–∏–Ω–∞',
         '–∞–ª–∏–Ω–∞', '–î–∞–≤–∏–¥', '–∞–Ω–∞—Å—Ç–∞—Å–∏—è', '–í–µ—Ä–æ–Ω–∏–∫–∞', '—è—Ä–æ—Å–ª–∞–≤', '–†—É—Å–ª–∞–Ω', '—Ç–∞—Ç—å—è–Ω–∞', '–î–µ–º–∏–¥', '–∞–º–µ–ª–∏—è', '–≠–ª–∏–Ω–∞', '–ê—Ä—Å–µ–Ω',
         '–µ–≤–≥–µ–Ω–∏–π', '–º–∞–¥–∏–Ω–∞', '–¥–∞—Ä–∏–Ω–∞', '–°–∞–≤–µ–ª–∏–π', '–ü–ª–∞—Ç–æ–Ω', '–ê–¥–µ–ª–∏–Ω–∞', '–¥–∏–∞–Ω–∞', '–ê–π—à–∞', '–ø–∞–≤–µ–ª', '–°—Ç–µ—Ñ–∞–Ω–∏—è', '–¢–∏–º—É—Ä',
         '–ï–≤–∞', '–ï–ª–∏—Å–µ–π', '–ê—Ä—Ç–µ–º–∏–π', '–≥—Ä–∏–≥–æ—Ä–∏–π', '–ú–∏—Ä–æ–Ω', '–ú–∏—Ä–æ—Å–ª–∞–≤–∞', '–ú–∏—Ä–∞', '–ú–∞—Ä–∞—Ç', '–õ–∏–ª–∏—è', '—Ä–æ–º–∞–Ω', '–≤–ª–∞–¥–∏—Å–ª–∞–≤',
         '–õ–µ–æ–Ω–∏–¥']

res = map(str.title, filter(lambda x: x[0] in '–ê–ú–∞–º' and len(x) > 4, names))
print(*sorted(res))

# –ö–æ—Ä–æ—á–µ
print(*sorted(map(str.title, filter(lambda x: x[0] in '–ê–ú–∞–º' and len(x) > 4, names))))


#  9.3-4
"""
–ò—Å–ø–æ–ª—å–∑—É—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é fib(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:
n ‚Äî –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å n-—ã–π —á–ª–µ–Ω –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –§–∏–±–æ–Ω–∞—á—á–∏.
Input:  print(fib(8))
Output: 21
"""
fib = lambda x: 1 if x <= 2 else fib(x - 1) + fib(x - 2)

# –º–µ–º–æ–∏–∑–∞—Ü–∏—è
# https://docs-python.ru/standart-library/modul-functools-python/dekorator-lru-cache-modulja-functools/
from functools import lru_cache
fib = lru_cache()(lambda x: 1 if x <= 2 else fib(x - 1) + fib(x - 2))

print(fib(100))  # 354224848179261915075


#  9.3-5
"""
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é print_operation_table(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç—Ä–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:
operation ‚Äî —Ñ—É–Ω–∫—Ü–∏—è, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—â–∞—è –Ω–µ–∫–æ—Ç–æ—Ä—É—é –±–∏–Ω–∞—Ä–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
rows ‚Äî –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
cols ‚Äî –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏ –≤—ã–≤–æ–¥–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏–∑ rows —Å—Ç—Ä–æ–∫ –∏ cols —Å—Ç–æ–ª–±—Ü–æ–≤, 
–≤ –∫–æ—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ —Å—Ç—Ä–æ–∫–æ–π ùëõ –∏ —Å—Ç–æ–ª–±—Ü–æ–º ùëö –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ operation(n, m)
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ù—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –µ–¥–∏–Ω–∏—Ü—ã.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –≠–ª–µ–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∞—Ö —Ç–∞–±–ª–∏—Ü—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –æ–¥–Ω–∏–º –ø—Ä–æ–±–µ–ª–æ–º (–≤—ã—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)

Input:  print_operation_table(lambda a, b: a * b, 5, 5)
Output: 1   2   3   4   5
        2   4   6   8   10
        3   6   9   12  15
        4   8   12  16  20
        5   10  15  20  25
"""
def print_operation_table(oper, rows, cols):
    width = len(str(oper(rows, cols)))
    for row in range(1, rows + 1):
        for col in range(1, cols + 1):
            print(f'{oper(row, col)}'.ljust(width), end=' ')
        print()

# print_operation_table(lambda a, b: a * b, 5, 5)
# print_operation_table(pow, 5, 3)


#  9.3-6
"""
–§—É–Ω–∫—Ü–∏—è verification()
https://stepik.org/lesson/640036/step/18?unit=636556
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é verification(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è. 
–û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —á–µ—Ç—ã—Ä–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:

login ‚Äî –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
password ‚Äî –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
success ‚Äî –Ω–µ–∫–æ—Ç–æ—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è
failure ‚Äî –Ω–µ–∫–æ—Ç–æ—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è

–ü–∞—Ä–æ–ª—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º, –µ—Å–ª–∏ –≤ –Ω–µ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, 
—Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è –ª–∞—Ç–∏–Ω—Å–∫–∞—è –±—É–∫–≤–∞, 
—Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å—Ç—Ä–æ—á–Ω–∞—è –ª–∞—Ç–∏–Ω—Å–∫–∞—è –±—É–∫–≤–∞ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞. 

–§—É–Ω–∫—Ü–∏—è verification() –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é success() —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º login, 
–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º, 
–∏–Ω–∞—á–µ ‚Äî —Ñ—É–Ω–∫—Ü–∏—é failure() —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ login –∏ —Å—Ç—Ä–æ–∫–æ–π-—Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ:

–≤ –ø–∞—Ä–æ–ª–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –±—É–∫–≤—ã, –µ—Å–ª–∏ –≤ –ø–∞—Ä–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã
–≤ –ø–∞—Ä–æ–ª–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã, –µ—Å–ª–∏ –≤ –ø–∞—Ä–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≥–ª–∞–≤–Ω—ã–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã
–≤ –ø–∞—Ä–æ–ª–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ—á–Ω–æ–π –±—É–∫–≤—ã, –µ—Å–ª–∏ –≤ –ø–∞—Ä–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç—Ä–æ—á–Ω—ã–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã
–≤ –ø–∞—Ä–æ–ª–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä—ã, –µ—Å–ª–∏ –≤ –ø–∞—Ä–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ü–∏—Ñ—Ä—ã
"""
from string import ascii_letters

def verification(login, password, success, failure):
    message = ['–±—É–∫–≤—ã', '–∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã', '—Å—Ç—Ä–æ—á–Ω–æ–π –±—É–∫–≤—ã', '—Ü–∏—Ñ—Ä—ã']
    latin = ''.join(filter(lambda x: x in ascii_letters, password))
    res = [len(latin),
           any(map(str.isupper, latin)),
           any(map(str.islower, latin)),
           any(map(str.isdigit, password))]

    if all(res):
        success(login)
    else:
        text = f'–≤ –ø–∞—Ä–æ–ª–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π {message[res.index(False)]}'
        failure(login, text)
