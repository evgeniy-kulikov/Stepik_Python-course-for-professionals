# 7.3 Обработка исключений
""""""

"""
Необязательный блок else

try:
    # контролируемый код
except тип_ошибки_1:
    # код обработки ошибки (исключения)
except тип_ошибки_2:
    # код обработки ошибки (исключения)
...
except тип_ошибки_n:
    # код обработки ошибки (исключения)
else:
    # код для случая, если ошибки (исключения) не было
"""

try:
    num = int(input())
    print('Квадрат числа равен:', num ** 2)
except ValueError:
    print('Вы ввели некорректные данные!')
else:
    print('Ошибки не произошло!')

print('Работа программы завершена!')

# >>> 10
# Квадрат числа равен: 100
# Ошибки не произошло!
# Работа программы завершена!

# >>> abc
# Вы ввели некорректные данные!
# Работа программы завершена!


"""
Помимо необязательного блока else, в инструкции try-except 
можно также использовать необязательный блок finally.

Блок finally размещается после последнего ехсерt блока, либо после блока else, если он присутствует, 
и содержит программный код, который выполняется в любом случае, 
независимо от того, возникла ошибка (исключение) при выполнении кода trу блока или нет.

Блок finally располагается после блока else, в случае присутствия последнего.
"""
try:
    num = int(input())
    print('Квадрат числа равен:', num ** 2)
except ValueError:
    print('Вы ввели некорректные данные!')
finally:
    print('Блок кода выполняется всегда!')

print('Работа программы завершена!')

# >>> 10
# Квадрат числа равен: 100
# Блок кода выполняется всегда!
# Работа программы завершена!

# >>> abc
# Вы ввели некорректные данные!
# Блок кода выполняется всегда!
# Работа программы завершена!


# Блок finally особенно удобен при работе с файлами
# В этом коде файл будет закрыт в любом случае, вне зависимости от того, произошла ошибка или нет.
try:
    file = open('data.txt', encoding='utf-8')
    try:
        text = file.read()
    except:
        print('При чтении из файла произошла ошибка!')
    else:
        print('Чтение из файла прошло успешно!')
    finally:
        file.close()
except FileNotFoundError:
    print('Файл с указанным именем не найден!')

"""
Блок finally может также использоваться без блоков except и else. 
В этом случае, если в блоке try возникает ошибка (исключение), 
то сначала выполняется блок finally, 
а затем ошибка (исключение) продолжает «всплывание» к обработчику более высокого уровня.
"""
try:
    file = open('data.txt', encoding='utf-8')
    try:
        text = file.read()
    finally:
        file.close()
except FileNotFoundError:
    print('Файл с указанным именем не найден!')
except:
    print('Произошла ошибка!')


# Инструкции внутри блока finally будут выполнены, даже если блок try содержит break, continue, return.
def func():
    try:
        return 10
    finally:
        print('Выполняется блок finally!')
print(func())
# Выполняется блок finally!
# 10

"""
Интересна ситуация, когда возврат из функции (return) осуществляется как в блоке try, так и в блоке finally. 
Поскольку блок finally выполняется до return, то результирующее значение будет получено именно из блока finally.
"""
def func():
    try:
        return 10
    finally:
        return 20
print(func())  # 20


# Приведенный код:
with open('data.txt', 'r', encoding='utf-8') as file:
    text = file.read()

# примерно равнозначен коду:
try:
    file = open('data.txt', 'r', encoding='utf-8')
    try:
        text = file.read()
    finally:
        file.close()
except:
    pass

# Предпочтение всегда стоит отдавать менеджерам контекста



"""   *   *   *   Task   *   *   *   """


#  7.3-1
"""
выводит название месяца, соответствующее введенному целому числу (от 1 до 12 включительно), 
причем если введенное число не принадлежит отрезку [1;12],
программа должна вывести текст:
Введено число из недопустимого диапазона
если введенное значение не является целым числом, программа должна вывести текст:
Введено некорректное значение
"""
from calendar import month_name as months

month = {k: v for k, v in enumerate(months[1:], 1)}

try:
    n = int(input())
except ValueError:
    print('Введено некорректное значение')
else:
    try:
        print(month[n])
    except KeyError:
        print('Введено число из недопустимого диапазона')


#  7.3-2
"""
Реализуйте функцию add_to_list_in_dict(), которая принимает три аргумента в следующем порядке:

data — словарь списков, то есть словарь, значениями в котором являются списки
key — хешируемый объект
element — произвольный объект

Функция должна добавлять объект element в список по ключу key в словаре data. 
Если ключа key в словаре data нет, функция должна добавить его в словарь, 
присвоить ему в качестве значения пустой список и добавить в этот список объект element.
Input:  *
Output: *
"""

def add_to_list_in_dict(data: dict, key, element):
    try:
        data[key] += [element]
    except KeyError:
        data[key] = [element]


data = {'a': [1, 2, 3], 'b': [4, 5, 6]}
add_to_list_in_dict(data, 'b1', 7)

print(data)
# {'a': [1, 2, 3], 'b': [4, 5, 6, 7]}


#  7.3-3
"""
https://stepik.org/lesson/744448/step/22?unit=746216
Напишите программу с использованием конструкции try-except, 
которая принимает на вход название текстового файла и выводит его содержимое. 
Если файла с данным названием нет в папке с программой, программа должна вывести текст:
Файл не найден
Input:  *
Output: *
"""

try:
    file = open(input(), 'r', encoding='utf-8')
    try:
        print(file.read())
    finally:
        file.close()
except FileNotFoundError:
    print('Файл не найден')


# Длинный вариант
try:
    file = open(input(), 'r', encoding='utf-8')
    try:
        text = file.readlines()
        for el in text:
            print(el.strip())
    finally:
        file.close()
except FileNotFoundError:
    print('Файл не найден')

